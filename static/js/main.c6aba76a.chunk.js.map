{"version":3,"sources":["ColorSpaceSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorSpaces","name","type","rVec","Vector3","FromArray","Color3","Red","asArray","gVec","Green","bVec","Blue","plainEnglish","ColorSpaceSelector","onColorSpaceSelected","Select","native","defaultValue","onChange","event","colorSpace","target","value","inputProps","id","map","cs","key","Effect","ShadersStore","postProcess","undefined","textures","fileName","App","useState","find","selectedColorSpace","setSelectedColorSpace","selectedImageIndex","setImageIndex","cameraRef","useCallback","node","camera","hostInstance","PostProcess","onApply","effect","setVector3","useEffect","Grid","container","spacing","style","height","item","xs","sm","Typography","colorSpaceName","newColorSpace","Button","onClick","length","variant","antialias","adaptToDeviceRatio","canvasId","clearColor","Color4","FromColor3","FromHexString","ref","alpha","Math","PI","beta","radius","minZ","wheelPrecision","lowerRadiusLimit","direction","intensity","size","rotation","backFaceCulling","assignTo","url","process","hasAlpha","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6aba76a.chunk.js","sourcesContent":["\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport { Vector3, Color3 } from '@babylonjs/core';\n\nexport type ColorSpaceRGB = {\n    name: string,\n    plainEnglish?: string,\n    type: string,\n    rVec: Vector3,\n    gVec: Vector3,\n    bVec: Vector3\n}\n\n// TODO: include display color spaces with reduced color gamut\nexport const ColorSpaces: ColorSpaceRGB[] = [\n    {\n        name: 'Normal',\n        type: 'Normal',\n        rVec: Vector3.FromArray(Color3.Red().asArray()),\n        gVec: Vector3.FromArray(Color3.Green().asArray()),\n        bVec: Vector3.FromArray(Color3.Blue().asArray())\n    }, {\n        name: 'Protanopia',\n        plainEnglish: 'red blind',\n        type: 'Dichromatic',\n        rVec: new Vector3(0.56667, 0.43333, 0),\n        gVec: new Vector3(0.55833, 0.44167, 0),\n        bVec: new Vector3(0, 0.24167, 0.75833),\n    }, {\n        name: 'Protanomaly',\n        plainEnglish: 'red weak',\n        type: 'Anomalous Trichromacy',\n        rVec: new Vector3(0.81667, 0.18333, 0),\n        gVec: new Vector3(0.33333, 0.66667, 0),\n        bVec: new Vector3(0, 0.125, 0.875)\n    }, {\n        name: 'Deuteranopia',\n        plainEnglish: 'green blind',\n        type: 'Dichromatic',\n        rVec: new Vector3(0.625, 0.375, 0.0),\n        gVec: new Vector3(0.7, 0.3, 0.0),\n        bVec: new Vector3(0.0, 0.3, 0.7)\n    }, {\n        name: 'Deuteranomaly',\n        plainEnglish: 'green weak',\n        type: 'Anomalous Trichromacy',\n        rVec: new Vector3(0.80, 0.20, 0),\n        gVec: new Vector3(0.25833, 0.74167, 0),\n        bVec: new Vector3(0, 0.14167, 0.85833)\n    }, {\n        name: 'Tritanopia',\n        plainEnglish: 'blue blind',\n        type: 'Dichromatic',\n        rVec: new Vector3(0.95, 0.5, 0),\n        gVec: new Vector3(0, 0.43333, 0.56667),\n        bVec: new Vector3(0, 0.475, 0.525)\n    }, {\n        name: 'Tritanomaly',\n        plainEnglish: 'blue weak',\n        type: 'Anomalous Trichromacy',\n        rVec: new Vector3(0.96667, 0.3333, 0),\n        gVec: new Vector3(0, 0.73333, 0.26667),\n        bVec: new Vector3(0, 0.18333, 0.81667)\n    }, {\n        name: 'Achromatopsia',\n        plainEnglish: 'Monochromacy',\n        type: 'Monochromatic',\n        rVec: new Vector3(0.299, 0.587, 0.114),\n        gVec: new Vector3(0.299, 0.587, 0.114),\n        bVec: new Vector3(0.299, 0.587, 0.114)\n    }, {\n        name: 'Achromatomaly',\n        plainEnglish: 'mild Monochromacy',\n        type: 'Monochromatic',\n        rVec: new Vector3(0.618, 0.32, 0.62),\n        gVec: new Vector3(0.163, 0.775, 0.62),\n        bVec: new Vector3(0.163, 0.320, 0.516)\n    }\n]\n\ntype ColorSpaceSelectorProps = {\n    onColorSpaceSelected: (colorSpaceName: string) => void\n};\n\nconst ColorSpaceSelector = ({ onColorSpaceSelected }: ColorSpaceSelectorProps) => {\n    const handleChange = (event: any /* TODO: find ValueType<T> declaration */) => {\n        const colorSpace = event.target.value;\n        onColorSpaceSelected(colorSpace);\n    }\n\n    return (\n        <Select\n            native\n            defaultValue={'Normal'}\n            onChange={handleChange}\n            inputProps={{\n                name: 'colorSpace',\n                id: 'color-space-id',\n            }}\n        >\n            {\n                ColorSpaces.map((cs: ColorSpaceRGB) => <option key={`cs-${cs.name}`} value={cs.name}>{cs.name}{cs.plainEnglish ? ` (${cs.plainEnglish})` : ''}</option>)\n            }\n        </Select>\n    )\n}\n\nexport default ColorSpaceSelector","import React, { useCallback, useState } from 'react';\nimport { Vector3, Effect, PostProcess, Color3, Color4, ArcRotateCamera } from '@babylonjs/core';\nimport { Engine, Scene } from 'react-babylonjs';\nimport { CreatedInstance } from 'react-babylonjs/dist/CreatedInstance'\nimport Grid from '@material-ui/core/Grid';\nimport ColorSpaceSelector, { ColorSpaces, ColorSpaceRGB } from './ColorSpaceSelector';\nimport './App.css';\nimport { Typography, Button } from '@material-ui/core';\nimport { useEffect } from 'react';\n\nEffect.ShadersStore[\"customFragmentShader\"] = `\n    #ifdef GL_ES\n        precision highp float;\n    #endif\n\n    // Samplers\n    varying vec2 vUV;\n    uniform sampler2D textureSampler;\n\n    // Parameters\n    uniform vec3 rVec;\n    uniform vec3 gVec;\n    uniform vec3 bVec;\n\n    void main(void) \n    {\n      vec3 color = texture2D(textureSampler, vUV).rgb;\n\n      mat3 colorMatrix;\n\t\t\tcolorMatrix[0] = rVec;\n\t\t\tcolorMatrix[1] = gVec;\n\t\t\tcolorMatrix[2] = bVec;\n\n      vec3 res = colorMatrix * color;\n      gl_FragColor = vec4(res, 1.0);\n    }\n    `;\nlet postProcess: PostProcess | undefined = undefined;\n\n// These are all is a wikipedia CC0 commons license images (search )\nconst textures = [\n  {\n    name: 'Image 3',\n    fileName: 'Ishihara_9.png'\n  }, {\n    name: 'Image 4',\n    fileName: 'Ishihara_23.png'\n  }, {\n    name: 'Image 1',\n    fileName: 'Ishihara_1.png'\n  }, {\n    name: 'Image 2',\n    fileName: 'Ishihara_2.png'\n  }\n]\n\nfunction App() {\n  const [selectedColorSpace, setSelectedColorSpace] = useState<ColorSpaceRGB>(ColorSpaces.find(cs => cs.name === 'Normal')!);\n  const [selectedImageIndex, setImageIndex] = useState<number>(0);\n\n  const onColorSpaceSelected = (colorSpaceName: string) => {\n    const newColorSpace = ColorSpaces.find(cs => cs.name === colorSpaceName)!;\n    setSelectedColorSpace(newColorSpace)\n  }\n\n  const cameraRef = useCallback((node: CreatedInstance<ArcRotateCamera>) => {\n    const camera: ArcRotateCamera = node.hostInstance!;\n    postProcess = new PostProcess(\"My custom post process\", \"custom\", [\"rVec\", \"gVec\", \"bVec\"], null, 1.0 /* full size */, camera);\n    postProcess.onApply = (effect: Effect) => {\n      effect.setVector3('rVec', selectedColorSpace!.rVec);\n      effect.setVector3('gVec', selectedColorSpace!.gVec);\n      effect.setVector3('bVec', selectedColorSpace!.bVec);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (postProcess) {\n      postProcess!.onApply = (effect: Effect) => {\n        effect.setVector3('rVec', selectedColorSpace!.rVec);\n        effect.setVector3('gVec', selectedColorSpace!.gVec);\n        effect.setVector3('bVec', selectedColorSpace!.bVec);\n      };\n    }\n  }, [selectedColorSpace]);\n\n  const onButtonClicked = () => {\n    setImageIndex((selectedImageIndex + 1) % textures.length);\n  }\n\n  return (\n    <Grid container spacing={0} style={{height: '100%'}}>\n      <Grid item xs={12} sm={4}>\n        <Typography>Choose Color Space</Typography>\n        <ColorSpaceSelector onColorSpaceSelected={onColorSpaceSelected} />\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <Typography>Current image:</Typography>\n        <strong>{textures[selectedImageIndex].name}</strong>\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <Button onClick={onButtonClicked} variant=\"outlined\">Next Image »</Button>\n      </Grid>\n      <Grid item xs={12} style={{height: '100%'}}>\n        <Engine antialias={true} adaptToDeviceRatio={true} canvasId=\"sample-canvas\">\n          <Scene clearColor={Color4.FromColor3(Color3.FromHexString('#777777'))}>\n            <arcRotateCamera ref={cameraRef} name=\"arc\" target={ new Vector3(0, 1, 0) }\n                  alpha={Math.PI / 2} beta={Math.PI / 2}\n                  radius={600} minZ={0.001} wheelPrecision={50} \n                  lowerRadiusLimit={0.1} />\n            <hemisphericLight name='hemi' direction={new Vector3(0, 0.25, 0.25)} intensity={0.8} />\n\n            <plane name='test-image' size={512} rotation={new Vector3(0, Math.PI, 0)}>\n              <standardMaterial name='test-mat' backFaceCulling={false}>\n                <texture key={textures[selectedImageIndex].fileName} assignTo='diffuseTexture' url={`${process.env.PUBLIC_URL}/assets/${textures[selectedImageIndex].fileName}`} hasAlpha />\n              </standardMaterial>\n            </plane>\n          </Scene>\n        </Engine>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}